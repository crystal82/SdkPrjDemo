apply plugin: 'com.android.library'

version = 1.0
android {
    buildToolsVersion "26.0.2"
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

dependencies {
    //1.所有库都需要注释，避免重复
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    //混淆文件只保留一个

    //implementation project(':center')
    //implementation project(':usermodel')
    //compile project(':utilsmodule')
    compile project(':center')
}

task sync_jars() << {
    //把所有依赖的.jar库都拷贝到build/aar/libs下

    copy {
        into buildDir.getPath() + "/aar/libs"
        from configurations.compile.findAll {
            it.getName().endsWith(".jar")
        }

    }
}

task sync_aars(dependsOn: ':utilsmodule:assembleRelease') {
    //把所有依赖的.aar库里包含的classes.jar都拷贝到build/aar/libs下，并重命名以不被覆盖
    doLast {
        def jar_name
        def aar_path
        def dest_dir = buildDir.getPath() + "/aar"
        println configurations.compile.size()

        configurations.compile.findAll {
            it.getName().endsWith(".aar")
        }.collect {
            aar_path = it.getPath()
            if (!it.getName().startsWith("support") && !it.getName().startsWith("runtime") && !it.getName().startsWith("animated")) {
                jar_name = "libs/" + it.getName().replace(".aar", ".jar")
                copy {
                    from zipTree(aar_path)
                    into dest_dir
                    include "**/*"
                    rename 'classes.jar', jar_name
                }
            }
        }
    }
}

task fataar(dependsOn: [sync_aars, sync_jars]) << {
    task(obfuse_classes_jar, type: proguard.gradle.ProGuardTask) {
        //把build/aar/libs/*.jar混淆后生成build/aar/classes.jar  proguard.cfg
        configuration "proguard-rules.pro"
        injars buildDir.getPath() + "/aar/libs"
        outjars buildDir.getPath() + "/aar/classes.jar"
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
        libraryjars "${System.getProperty('java.home')}/Contents/Classes/classes.jar"
        libraryjars System.getenv("ANDROID_HOME") + "/platforms/android-19/android.jar"
    }.execute()
    task(gen_aar, type: Zip) {
        //把生成最终的aar包，注意libs目录需要被排除
        def dest_dir = buildDir.getPath() + "/aar/"
        baseName = "mysdk-all"
        extension = "aar"
        destinationDir = file(buildDir.getPath())
        from dest_dir
        exclude "libs"
    }.execute()
}